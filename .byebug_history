continue
tt=Tranheads::Nobank.find_by(transfer_id: self.id, trpayrec: 'P')
continue
ap ttt.second.trans.second
ap ttt.second.trans.first
ap ttt.first.trans.second
ap ttt.first.trans.first
ap ttt.first
ttt=Tranhead.joins(:trans).where("trans.case_id="+@case.id.to_s).order('trdate')
Tranhead.joins(:trans).where("trans.case_id="+@case.id.to_s).order('trdate')
continue
self
continue
matter_id
self.matter_id
self
continue
file_name
filefile_name
continue
thead
thead.all
thead.trpayrec
continue
thead.trpayrec
continue
thead.trpayrec
continue
thead.trpayrec
continue
thead.trpayrec
continue
thead.trpayrec
continue
thead.trpayrec=='P'
thead.trpayrec='P'
thead.trpayrec=='P'
thead.trpayrec
continue
thead.trans.first
thead.trans.count
thead
continue
self.new_record?
self.new_record
self
self.rew_record
self.rew_record?
self.trans.count
self.allorig.count
self.allorig
continue
@lc.first
@lc.tranhead.first
@lc.count
@lc
continue
rr=Tranhead.joins(:trans).where("trans.matter_id="+@matter.id.to_s).order('trdate')
rr
rr=Tranhead.joins(:trans).where("trans.matter_id="+@matter.id.to_s)
continue
rr=Tranhead.joins(:trans).where("trans.matter_id=3")
rr=Tranhead.joins(:trans).where("trans.matter_id=2")
rr=Tranhead.joins(:trans).where("trans.matter_id=3")
rr=Tranhead.joins(:trans).where("trans.matter_id=2")
rr=Tranhead.joins(:trans).where("trans.matter_id="+"2")
rr=Tranhead.joins(:trans).where("trans.matter_id="+@matter.id.to_s)
@matter.id.to_s
@matter.id.to_S
rr=Tranhead.joins(:trans).where("trans.matter_id="+@matter.id.to_s)
rr=Tranhead.joins(:trans).where("trans.matter_id="+@matter.id)
@matter.id
@matter
rr=Tranhead.joins(:trans).where("trans.matter_id="+@matter.id)
rr.first
rr
rr=Tranhead.joins(:trans).where("trans.matter_id=3")
rr.first.trans.first
rr.first.trans.count
rr.first
rr
rr=Tranhead.joins(:trans).where("trans.matter_id=3")
Tranhead.joins(:trans).where("trans.matter_id=3")
Tranhead.includes(:trans).where("trans.matter_id=3")
Tranhead.joins(:trans).where("trans.matter_id=3").count
Tranhead.joins(:trans).where("matter_id=3").count
Tranhead.joins(:trans).count
Tranhead.includes(:trans).where("matter_id=3")
rr.first
rr=Tranhead.includes(:tran).where("matter_id=3")
Tranhead.includes(:tran).where("matter_id=3")
t
t.type
t.fisrt
t
t=Tranhead.includes(:tran).all
t=Tranhead.includes(:tran)
t.first
t=Tranhead.includes(:tran)
Tranhead.includes(:tran)
Tranhead.includes(:trans).where(trans: { matter_id: 3 })
Tranhead.includes(:trans).where(trans: { matter_id: @matter.id })
tt
tt=Tranhead.includes(:trans).where(trans: 'matter_id=3')
tt=Tranhead.includes(:trans).where(trans: { matter_id: 3 })
tt=Tranhead.includes(:trans).where('matter_id=3')
tt
tt=Tranhead.includes(:trans).where(trans: { matter_id: 3 })
tt
tt=Tranhead.includes(:trans).where(trans: { matter_id: @matter.id })
ff
ff = Tranhead.includes(:trans).where(trans: { matter_id: @matter.id })
continue
@lc
t
t.first
t
t=Tranhead.includes(:trans).where(trans: { matter_id: 3 })
Tranhead.includes(:trans).where(trans: { matter_id: 3 })
Tranhead.all
@lc
lc
@lc.tranhead
@lc.tranhead.first
@lc
@lc.first
@lc.count
@lc
ap @lc
ap @lc.first
@lc.first.amount
@lc.first.tramount
@lc
continue
@matter.id
@matter.matter_id
@matter
@lc.count
@lc
lc
continue
Tranhead.includes(:trans).where(trans: { matter_id: 3 })
Tranhead.includes(:trans).where(trans: { matter_id: 3' })
Tran.where(:trans => {:matter_id => 3})
Tranhead.where(:trans => {:matter_id => 3})
Tranhead.where(:tranheads => {:trtrantype => 'MAT'})
Tranhead.where(:tranheads => {:trref => 12})
Tranhead.where(:trans => {:trref => 12})
Tranhead.where(:trans => {:matter_id => 3})
Tranhead.where(:tran => {:matter_id => 3})
Tranhead.where(:matter_id => {:matter_id => 3})
Tranhead.where(:matter_id => {3})
Tranhead.where(:matter_id => {:id => 3})
Tranhead.where({:id => 3})
Tranhead.where(:matter_id => {:id => 3})
Tranhead.all
Tranhead
Tranhead.tran.all
Tranhead.trans.all
ap Tran.all
ap Tranhead.all
Tranhead.all
ap @lc.all
ap @lc.first
@lc.first.matter_id
@lc.first.tramount
@lc
continue
errors.second
errors.first
errors.count
errors
continue
next
self.tNewClPay.errors
self.tNewClPay
continue
self.tNewClPay.errors
next
self.tNewClPay.errors
self.tNewClPay
next
self.tNewClPay
self.tNewClRec.errors
next
errors.count
continue
value
key
continue
tran2.errors.first
tran2.errors
continue
tran2.errors
next
tran2
next
continue
tran1
next
continue
self.tNewPay.trans.first.type
self.tNewPay.trans
self.tNewPay.trans::Tranopmat
self.tNewPay.trans::Tranopmat.count
self.tNewPay.trans::Tranopmat
self.tNewPay.Tranopmat
self.tNewPay.trans.first.type
self.tNewPay.tranopmat.first
self.tNewPay.tranopmat.count
self.tNewPay.tranopmat
self.tNewPay.trans.tranopmat
self.tNewPay.trans.first.type
self.tNewPay.trans.first
self.tNewPay.trans.count
continue
ap self.tNewPay.trans.second
ap self.trans.first
ap self.tNewPay
ap self.tranhead.all
ap self.Tranhead.all
ap Tranhead.all
ap self.tNewPay.trans.second
ap self.tNewPay.trans.first
ap self.tNewPay.trans.second
self.tNewPay.trans.second
self.tNewPay.trans.first
self.tNewPay
continue
self.tNewPay
self.tNewPay.trpayrec='G'
self.tNewPay
self.tNewRec
continue
self.tNewRec
self.tNewPay
tranhead
continue
tranhead
continue
self.tonominal_id
self.tNewPay.errors
continue
self.tNewPay.errors
continue
self.tNewPay.errors
continue
errors.count
errors
continue
tranhead
continue
tranhead
continue
_tid.type[5,1].upcase
_tid.type[5,1].upper
